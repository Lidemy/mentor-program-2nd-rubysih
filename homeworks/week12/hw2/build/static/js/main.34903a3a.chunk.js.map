{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","serviceWorker.js","index.js"],"names":["Square","handleClick","_this","props","color","_this$props","index","onChangePlayer","onSetHistory","nowPlayer","gameover","this","react_default","a","createElement","className","onClick","Component","Board","renderSquare","i","console","log","components_Square","value","handlePlayer","handleHistory","_this2","size","black","white","sizeArr","j","map","x","y","find","blackItem","whiteItem","key","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this$state","state","nextPlayer","setState","handleWinner","_this$state2","toConsumableArray","concat","_this$state3","history","checkLine","direction","count","_loop","some","checkWin","_loop2","winner","_this$state4","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","components_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34903a3a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Square extends Component {\r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         value: null\r\n    //     }\r\n    // }\r\n    handleClick = () => {\r\n        const {color} = this.props;\r\n        if(color) return;\r\n        const {index, onChangePlayer, nowPlayer, onSetHistory, gameover} = this.props;\r\n        \r\n        if(!gameover){\r\n            // this.setState({\r\n            //     color: nowPlayer\r\n            // })\r\n            onSetHistory(index);\r\n            onChangePlayer(index);\r\n        }\r\n    }\r\n    render() {\r\n        const {color} = this.props;\r\n\r\n        return (\r\n            <div className=\"btn-square\" onClick={this.handleClick}>\r\n                <div className={\"piece \" + color} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends Component {\r\n\r\n    renderSquare = (i) => {\r\n        console.log('rendersquare');\r\n        return <Square value={i} />;\r\n    }\r\n    handlePlayer = (index) => {\r\n        const {onChangePlayer} = this.props;\r\n        onChangePlayer(index);\r\n    }\r\n    handleHistory = (index) => {\r\n        const {onSetHistory} = this.props;\r\n        onSetHistory(index);\r\n    }\r\n    render() {\r\n        const {size,nowPlayer, gameover, black, white} = this.props;\r\n        let sizeArr = [];\r\n        for(let i=0;i<size;i++){\r\n            sizeArr[i] = [];\r\n            for(let j=0;j<size;j++){\r\n                sizeArr[i][j] = [];\r\n                sizeArr[i][j][0]=i*19+j+1;\r\n                sizeArr[i][j][1]='';\r\n            }\r\n        }\r\n        console.log(black,'black');\r\n        console.log(white,'white');\r\n        sizeArr.map(x => {\r\n            x.map(y => {\r\n                if(black.find(blackItem => blackItem ===y[0])){\r\n                    y[1] = 'black';\r\n                }\r\n                if(white.find(whiteItem => whiteItem ===y[0])){\r\n                    y[1] = 'white';\r\n                }\r\n            })\r\n        })\r\n        console.log(sizeArr);\r\n        return (\r\n            <div className=\"board\">\r\n                {\r\n                    sizeArr.map(x => (\r\n                        x.map(y => (\r\n                            //y[0] = id, y[1] = color\r\n                            <Square key={y[0]} index={y[0]} onChangePlayer={this.handlePlayer} nowPlayer={nowPlayer}  onSetHistory={this.handleHistory} gameover={gameover} color={y[1]}/>\r\n                        ))\r\n                    ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\nimport Board from './Board';\n\nclass Game extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      nowPlayer: 'black',\n      winner: '',\n      gameover: false,\n      black: [],\n      white: []\n    }\n  }\n  //set now player\n  handlePlayer = (index) => {\n    const {nowPlayer, gameover} = this.state;\n    if(gameover) return;    \n    const nextPlayer = (nowPlayer === 'black')?'white':'black';\n    this.setState({\n      nowPlayer:nextPlayer\n    })\n    this.handleWinner(nowPlayer,index);\n\n  }\n  //黑白棋歷史紀錄\n  handleHistory = (index) => {\n    const {nowPlayer, gameover, black, white} = this.state;\n    if(gameover) return;\n    if(nowPlayer === 'black'){\n      this.setState({\n        black: [... black, index]\n      })\n    }else{\n      this.setState({\n        white: [... white, index]  \n      })\n    }\n  }\n  handleWinner = (nowPlayer, index) => {\n    const {black,white} = this.state;\n    const history = (nowPlayer === 'black')?black:white;\n    const horizontal=1, //橫向\n          vertical=19,  //直向\n          obliqueLeftUp=20,//斜左上\n          obliqueRightUp=18;//斜右上\n    this.checkLine(index, history, horizontal);\n    this.checkLine(index, history, vertical);\n    this.checkLine(index, history, obliqueLeftUp);\n    this.checkLine(index, history, obliqueRightUp);\n  }\n\n  //連線檢查\n  checkLine = (index, history, direction) => {\n    //以防有最後子在中間這種情形，因此同一條直線的兩邊都會檢查\n    let count = 1;\n    for(let i=1;i<5;i++){\n      if(history.some(x => x===(index+i*direction))){\n        count++;\n      }else{\n        break;\n      }\n    }\n    if(this.checkWin()){return;}\n      for(let i=1;i<5;i++){\n        if(history.some(x => x===(index-i*direction))){\n          count++;\n        }else{\n          break;\n        }\n      }\n    this.checkWin(count);\n  }\n\n  //連線棋子數檢查\n  checkWin = (count) => {\n    if(count === 5){\n      const {nowPlayer} = this.state;\n      this.setState({\n        winner: nowPlayer,\n        nowPlayer: \"\",\n        gameover: true\n      })\n      return true;\n    }\n    return false;\n  }\n  handleClick = () => {\n    this.setState({\n      nowPlayer: 'black',\n      winner: '',\n      gameover: false,\n      black: [],\n      white: []\n    })\n  }\n  render() {\n    const {nowPlayer, winner, gameover} = this.state;\n    return (\n      <div className=\"game\">\n        <p>目前輪到: <span >{nowPlayer}</span></p>\n        <p>獲勝者: <span >{winner}</span></p>\n        <div className=\"btn btn-again\" onClick={this.handleClick}>重新開始</div>\n        <Board size={19} nowPlayer={nowPlayer} onChangePlayer={this.handlePlayer}  onSetHistory={this.handleHistory} gameover={gameover} black={this.state.black} white={this.state.white}/>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}