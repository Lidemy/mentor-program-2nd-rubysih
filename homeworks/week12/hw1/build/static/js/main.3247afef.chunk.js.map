{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","serviceWorker.js","index.js"],"names":["TodoItem","removeTodo","e","onDelete","_this","props","target","parentNode","className","split","finishedTodo","onFinished","itemId","console","log","todoItem","this","react_default","a","createElement","id","finished","value","type","onClick","Component","TodoList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleAdd","_this$state","state","list","setState","toConsumableArray","concat","handleChange","deleteId","filter","item","parseInt","finishedId","newList","map","_this2","_this$state2","placeholder","onChange","components_TodoItem","key","Boolean","window","location","hostname","match","ReactDOM","render","components_TodoList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3247afef.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TodoItem extends Component {\r\n    //刪除按鈕\r\n    removeTodo = (e) => {\r\n        const {onDelete} = this.props;\r\n        const itemId = e.target.parentNode.className.split(' ')[1]; //第二個 class\r\n\r\n        onDelete(itemId);\r\n    }\r\n    //完成按鈕\r\n    finishedTodo = (e) => {\r\n        const {onFinished} = this.props;\r\n        const itemId = e.target.parentNode.className.split(' ')[1]; //第二個 class\r\n        console.log(e.target.parentNode.className.split(' ')[1]);\r\n        onFinished(itemId);\r\n    }\r\n    render() {\r\n        const {todoItem} = this.props;\r\n        return (\r\n            <div className={\"todo__item \" + todoItem.id + (todoItem.finished ? \" finished\" : \" \") }>\r\n                <label >{todoItem.value}</label>\r\n                <button type=\"button\" className=\"btn btn-dark js__delete\" onClick={this.removeTodo}>刪除</button>\r\n                <button type=\"button\" className=\"btn btn-dark js__finished\" onClick={this.finishedTodo}>完成</button>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nclass TodoList extends Component {\n  constructor(){\n    super();\n    this.state = {\n      list: [],\n      value: ''\n    }\n    this.id = 0;\n  }\n  //新增按鈕\n  handleAdd = () => {\n    const {value,list} = this.state;\n    this.setState({\n      list: [...list,\n        {\n          id: this.id,\n          value: value,\n          finished: false\n        }\n      ],\n      value: '',\n    })\n    this.id++;\n  }\n  //input 更新\n  handleChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n  //刪除項目\n  removeTodo = (deleteId) => {\n    const {list} = this.state;\n    this.setState({\n      list: list.filter((item) => {\n        return item.id!==parseInt(deleteId)})\n    })\n  }\n  //更新項目為完成\n  finishedTodo = (finishedId) => {\n    const {list} = this.state;\n    const newList = list.map(item => {\n      if(item.id === parseInt(finishedId) ){\n        item.finished = true;\n      }\n      return item;\n    })\n    this.setState({\n      list: newList\n    })\n  }\n  render() {\n    const {value,list} = this.state;\n    return (\n      <div className=\"todo-list\">\n          <div className=\"row new__todo\">\n              <div className=\"col-md-9 col-sm-10\">\n                  <input type=\"text\" className=\"form-control\" placeholder=\"新增 todo 項目\" value={value} onChange={this.handleChange}/>                 \n              </div>\n              <div className=\"col-md-3 col-sm-2\">\n                  <button type=\"button\" className=\"btn btn-secondary js__new-todo\" onClick={this.handleAdd}>新增</button>\n              </div>\n          </div>\n          <div className=\"todo__block\">\n              {list.map(item =><TodoItem todoItem={item} key={item.id} onDelete={this.removeTodo} onFinished={this.finishedTodo}>{item.value}</TodoItem>)}\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './components/TodoList';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoList />, document.getElementById('container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}