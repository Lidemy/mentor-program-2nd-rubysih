{"version":3,"sources":["components/PostListItem.js","components/PostList.js","components/Post.js","components/App.js","serviceWorker.js","index.js"],"names":["PostListItem","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","_this$props","props","id","showPost","title","react_default","a","createElement","className","style","cursor","onClick","Component","PostList","getPostList","fetch","state","postList","_this2","then","response","json","setState","catch","err","console","log","_this3","undefined","map","post","components_PostListItem","key","Post","getPost","postId","body","type","class","About","aria-describedby","placeholder","App","removeHashTag","hash","slice","hashChange","tag","window","location","e","target","name","addEventListener","clearEventListener","_this$state","href","App_About","components_PostList","components_Post","Boolean","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08d904a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass PostListItem extends Component {\r\n    constructor(){\r\n        super();\r\n        // this.state = {\r\n        //   postList: []\r\n        // }\r\n    }\r\n    handleClick = () => {\r\n        const {id,showPost} = this.props;\r\n        showPost(id);\r\n    }\r\n  \r\n    render() {\r\n        const {title} = this.props;\r\n        return (\r\n            <li className=\"list-group-item\" >\r\n                <div style={{cursor:'pointer'}} onClick={this.handleClick} >{title}</div>\r\n            </li>\r\n            );\r\n        }\r\n}\r\n\r\nexport default PostListItem;\r\n","import React, { Component } from 'react';\r\n// import Post from './Post';\r\nimport PostListItem from './PostListItem';\r\n\r\nclass PostList extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      postList: []\r\n    }\r\n  }\r\n  //取得文章列表\r\n  getPostList = () => {\r\n    return fetch('https://jsonplaceholder.typicode.com/posts');\r\n  }\r\n  componentDidMount(){\r\n    this.getPostList()\r\n    .then(function(response) {\r\n      return response.json();\r\n    })\r\n    .then(postList => {\r\n      this.setState( {\r\n        postList: postList\r\n      });\r\n\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n  showPost = (id) => {\r\n    // console.log('showpost',post);\r\n    this.props.showPost(id);\r\n  }\r\n\r\n  render() {\r\n    const {postList} = this.state;\r\n    console.log(postList,'dd');\r\n    if(postList !== undefined){\r\n      console.log('render');\r\n      return (\r\n        <ul className=\"list-group list-group-flush\">\r\n          { \r\n            postList.map(post => (\r\n            // (<li className=\"list-group-item\" key={post.id}>{post.title}</li>)\r\n            (<PostListItem key={post.id} id={post.id} title={post.title} showPost={this.showPost}/>)\r\n          ))}\r\n\r\n        </ul>\r\n      );\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nexport default PostList;\r\n","import React, { Component } from 'react';\r\nclass Post extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            post: ''\r\n        }\r\n    }\r\n    //取得文章\r\n    getPost = (id) => {\r\n        return fetch('https://jsonplaceholder.typicode.com/posts/' + id);\r\n    }\r\n    componentDidMount(){\r\n        const {postId} = this.props;\r\n        this.getPost(postId)\r\n        .then(function(response) {\r\n        return response.json();\r\n        })\r\n        .then(post => {\r\n        this.setState( {\r\n            post: post\r\n        });\r\n\r\n        })\r\n        .catch(err => {\r\n        console.log(err);\r\n        });\r\n    }\r\n    handleClick = () => {\r\n        const {showPost} = this.props;\r\n        showPost('');\r\n    }\r\n    render() {\r\n        // const {postId} = this.props;\r\n        const {post} = this.state;\r\n        if(post.title){\r\n            return (\r\n                <div>\r\n                    <h1>{post.title}</h1>\r\n                    <p>\r\n                        {post.body}\r\n                    </p>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onClick={this.handleClick}>BACK</button>\r\n                </div>\r\n            );\r\n        }else{\r\n            return (\r\n                <p>Loading ...</p>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from 'react';\nimport PostList from './PostList';\nimport Post from './Post';\n\n//route todo\n// class Route extends Component {\n//   render(){\n//     const {tag, postId, Comp} = this.props;\n//     if(tag === 'postList' && postId === ''){\n//       const {showPost} = this.props;\n//       return (\n//         <Comp showPost={showPost}/>\n//       );\n//     }\n//     if(tag === 'postList' && postId !== ''){\n//       const {showPost} = this.props;\n//       return (\n//         <Comp showPost={showPost}/>\n//       );\n//     }\n//   }\n// }\n\nconst About = props => {\n  return (\n    <form>\n      <h2>聯絡我 : </h2>\n      <div className=\"form-group\">\n        <label>電子郵件 :</label>\n        <input type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\n      </div>\n      <div className=\"form-group\">\n        <label>內容 :</label>\n        <input type=\"text\" className=\"form-control\" placeholder=\"\" />\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary\">送出</button>\n    </form>\n  );\n}\n\nclass App extends Component {\n  constructor(){\n    super();\n    // console.log(window.location.hash);\n    this.state = {\n      tag: this.removeHashTag(window.location.hash) || 'postList',\n      postId: ''\n    };\n   \n  }\n  removeHashTag= (hash) => {\n    return hash.slice(1);\n  }\n  hashChange = () => {\n    this.setState({\n      tag: this.removeHashTag(window.location.hash)\n    })\n  }\n  handleClick = (e) => {\n    this.setState({\n      tag:e.target.name,\n      postId: ''\n    })\n    console.log(this.state.tag,e.target.name);\n  }\n  showPost = (postId) => {\n    this.setState({\n      postId: postId\n    })\n  }\n\n  componentDidMount(){\n    window.addEventListener('hashchange',this.hashChange);\n  }\n  componentWillUnmount(){\n    window.clearEventListener('hashchange',this.hashChange);\n  }\n  render() {\n    const {tag,postId} = this.state;\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <a className=\"navbar-brand\" href=\"#postList\">Blog</a>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n              <li className={\"nav-item\" + (tag === 'postList'?' active':'')}>\n                <a className=\"nav-link\" \n               href='#postList' >PostList</a>\n              </li>\n              <li className={\"nav-item\" + (tag === 'about'?' active':'')}>\n                <a className=\"nav-link\" href='#about'>About</a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        <div className='container'>\n          {(tag === 'about') && <About/>}\n          {(tag === 'postList' && postId === '') && <PostList showPost={this.showPost}/>}\n          {(tag === 'postList' && postId !== '') && <Post postId={postId} showPost={this.showPost}/>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}